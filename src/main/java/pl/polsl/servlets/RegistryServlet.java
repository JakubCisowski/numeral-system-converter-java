package pl.polsl.servlets;

import java.io.*;
import java.util.Date;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.*;
import pl.polsl.models.InvalidParameterException;
import pl.polsl.models.Registry;

/**
 * Main class of the servlet displaying current time, date and image. Site
 * generated by servlet is refreshed every 10 seconds.
 *
 * @author Gall Anonim
 * @version 1.0
 */
@WebServlet("/Registry")
public class RegistryServlet extends HttpServlet {
    
     /**
     * Conversion registry
     */
   public static Registry registry;
   
    /**
     * Constructor 
     */
    public RegistryServlet() {
         registry = new Registry();
     }

    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        response.setContentType("text/html; charset=ISO-8859-2");
        PrintWriter out = response.getWriter();
        response.setHeader("Refresh", "1");
        
         // Read registry cookies (just like in the lesson example).
        Cookie[] cookies = request.getCookies();
        Cookie registryCookie = null;
        String registrySer = null;
        if (cookies != null) {
            for (Cookie cookie : cookies) {
                if (cookie.getName().equals("registrySer")) {
                    registryCookie = cookie;
                    // Read from cookie into
                    registrySer = cookie.getValue();
                    break;
                }
            }
        }
        if (registrySer != null) {
            // Deserialize registry
            registry.desFromStr(registrySer);
        }
        
        // Display registry.
        String registryHtml = "";
        try{
                for(int i=0; i<registry.getRegistry().size(); i++)
                {
                    registryHtml += registry.getRegistry().get(i).getNumberValue();
                    registryHtml += registry.getRegistry().get(i).getOriginalSystem();
                    registryHtml += registry.getRegistry().get(i).getConversionResult();
                    registryHtml += registry.getRegistry().get(i).getTargetSystem();
                    registryHtml += "\n";
                }
            } catch (NullPointerException e) {
                    response.sendError(response.SC_BAD_REQUEST, e.getMessage());
            }
        
        if (registryCookie != null) {
            // Save registry to cookie
            registryCookie.setValue(registry.serToStr());
        }
        else {
            // Create new cookie and save registry.
            Cookie cookie = new Cookie("registrySer", registry.serToStr());
            response.addCookie(cookie);
        }
        
        
        out.println("<html>\n<body>\n" + registryHtml + "</body>\n</html>");
    }
    
     /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws IOException, ServletException {

        doGet(request, response);
    }
}
